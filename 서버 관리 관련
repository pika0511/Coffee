■ 스레드 덤프가 필요한 상황
 - 모든 시스템에 응답이 없을때(시스템 행 걸린 상황)
 - 사용자 수가 많지도 않은데 시스템 cpu 사용량이 떨어지지 않을때
 - 특정 애플리케이션을 수행했는데 응답이 없을때

■ 스레드 덤프 수행방법
 - kill -3 <pid>		: 시스템 로그가 생성되는 위치에 해당 파일이 생성된다.
 - jstack <pid> > filename	: 콘솔에 직접 출력되며, 해당 파일이름으로 저장
 ※ kill 명령어를 가급적이면 권장(jstack 명령어는 출력시간이 kill에 비해 더 걸리고, 시스템에 영향이 큼)
 ※ 스레드 덤프 수행시 ps -Lf -p <pid>도 주기적으로 실행하여 저장(스레드별 cpu 사용시간 정보등)
 ※ ps -Lf -p <pid> 항목
  ㄱ. PPID : 부모 pid
  ㄴ. LWP : 스레드 id
  ㄷ. NLWP : 해당 프로세스에서 사용하는 스레드 수
  ㄹ. C : 해당 프로세스가 지속적으로 사용하는 cpu 사용량 
 ※ 스레드 덤프 수행시 5초 간격으로 5~10회 수행
 
 ※ 기존 수행 방법 첨부(파일명을 시스템 시간정보가 반영되어 출력되도록 수정할 것)
149 서버
jstack 13217 > /home/mcslog/jstack1.txt
jstack 13217 > /home/mcslog/jstack2.txt
jstack 13217 > /home/mcslog/jstack3.txt
jstack 13217 > /home/mcslog/jstack4.txt
jstack 13217 > /home/mcslog/jstack5.txt

150 서버
jstack 21236 > /home/mcslog/jstack1.txt
jstack 21236 > /home/mcslog/jstack2.txt
jstack 21236 > /home/mcslog/jstack3.txt
jstack 21236 > /home/mcslog/jstack4.txt
jstack 21236 > /home/mcslog/jstack5.txt

■ 스레드 덤프 파일 분석
 - TDA 설치
 - Threads : 전체 스레드 목록
 - Threads Sleeping on Monitors : 대기중인 스레드 목록
 - Threads Locking Monitors : 잠겨있는 스레드 목록
 - Monitors : 모든 락의 원인이 되는 스레드를 식별하기 쉽게 출력
 - Monitor 클릭 : 락으로 대기중인 스레드가 많은 항목에 대해 빨간색으로 표시됨

■ 스레드 상태
 - New		: 스레드가 생성되었지만 아직 실행되지 않은 상태 
 - Runnable	: 현재 CPU를 점ㅇ
 - Blocked
 - Wating
 - Timed_wating

■ 스레드 관련된 문제상황
 - GC 관련 스레드가 대부분의 cpu를 점유할때 시스템이 느려짐
 - 전체적인 시스템이 항상 느릴때/특정 기능(화면)이 느릴때/특정 시간대(기간)에 전체 애플리케이션이 느릴때
   특정 시간대(기간)에 특정 애플리케이션이 느릴때/특정 기능(화면)이 점점 느려질 경우/특정 사용자에게만 애플리케이션이 느릴 경우
   → 리소스 점검(cpu, 메모리), 외부 리소스 점검, 스레드 및 메모리 상태 점검

 - 시스템 응답이 없을때
   ㄱ. 전체 스레드 개수 확인
   ㄴ. Monitor 목록에서 빨간색으로 표시되어 여러 스레드를 잡아 먹는 것이 있는지 확인
   ㄷ. Runnable 스레드 확인
   ㄹ. Long running threads detect 기능을 통해 지속적으로 수행중인 스레드 확인
   ㅁ. Root 노드를 클릭하여 메모리 사용량 확인

 - cpu 사용량이 급증할 때
   ㄱ. 메모리가 부족하여 GC관련 스레드만 반복 수행
   ㄴ. Regular Expression을 잘못 사용하여 무한루프가 수행될 때
   ㄷ. XML Parser에서 특수문자에 의해 무한루프가 수행될 때
   ㄹ. 애플리케이션상에서 무한루프 로직이 수행될 때
 
■ 스레드 관련 블로그
http://d2.naver.com/helloworld/10963

=================================================================================================

■ 힙 덤프가 필요한 상황
 - 메모리 누수가 의심될때(Full GC후에도 메모리 사용량이 80~90% 이상일때)

■ 힙 덤프시 주의사항
 - 덤프생성시 서비스가 불가
 - 생성소요시간이 길다.
 - 메모리 크기만큼의 파일이 생성

■ 힙 덤프 수행방법
 - jvm heap 상태 확인 
	jmap -heap <pid>
 - 클래스별 객체 수와 메모리 사용량 확인  
	jmap -histo:live <pid> | more
 - 실시간 heap 메로리 사용 정보 확인 
	jmap -heap:format=b <pid>
 - heapdump 파일 생성(filename : *.hprof 형태) 
	jmap -dump:format=b, file=<filename> <pid>
 - jvm의 pid 확인
	jps -v

 - 메인 메소드명 포함
	jps -m

 - 전체 패키지명 포함
	jps -i 

 - heapdump 분석 (jhat)
	jhat heapdump경로
	http://localhost:7000 로컬 웹서버가 구동된다. 접속해서 heapdump 분석 결과 확인 가능

 - Eclipse의 MAT 설치후 heapdump 파일 로드
	Getting started Wizard에서 Leak Suspects Report 선택	
	분석결과 상단에 Open Dominator Tree for entire heap
	메모리를 많이 차지하고 있는 객체 위주로 노출되므로, Retained Heap 항목을 선택하여 개선


■ 힙 덤프 분석
 - 이클립스상에서 MAT 설치
 - Leak Suspect Report 선택
 - Details 클릭
 - Description :해당 객체에 대한 설명
 - Shortest Paths To the Accumulation Point
   Accumulated Objects
   메모리를 점유하고 있는 객체를 각각 내림차순 / 오름차순 출력
 - Accumulated Objects by Class
   클래스별로 객체를 점유하는 대상목록
 - 각각의 객체를 클릭하여 상세정보 확인 가능
   List Objects : incoming / outgoing 참조 객체를 보여줌
   Paths to GC Roots : GC Root들을 보여줌
■ 시스템이 느린 것과 메모리의 관계
 - 메모리 크기를 잡지 않거나 너무 작게 잡아 GC가 자주 발생하는 경우
 - 임시 메모리를 많이 사용하여 GC가 자주 발생하는 경우

■ 응답이 없는 것과 메모리 관계
 - 메모리가 부족하여 GC가 자주 발생할 경우
 - Full GC후 메모리 사용량이 20~50%이면 정상, 80~90% 이상이면 메모리 누수
  
===============================================================================================

■ Java VisualVM 설치
 - http://visualvm.java.net
   별도 다운로드 버전으로 다운로드 하는 것을 권장

■ vmstat
 - vmstat -옵션 delay count
 - Procs	R : 실행하기 위해 대기하고 있는 프로세스 수
		B : 중단 불가능한 슬립상태에 있는 프로세스 수
 - Memory	Swpd : 가상 메모리를 사용한 크기
		Free : 사용하지 않는 메모리 크기
		Buff : 버퍼로 사용하는 메모리 크기
		Cache : 캐시로 사용하는 메모리 크기
 - Swap		Si : 초당 디스크에서 읽은 스왑된 메모리 크기
		So : 초당 디스크로 스왑된 메모리 크기
 - IO		Bi : 블록디바이스에서 받은 블록수
		Bo : 블록디바이스로 보낸 블록수
 - System	in : 클럭을 포함한 초당 인터럽트 수
		Cs : 초당 컨텍스트 전환 개수
 - CPU		Us : 사용자 코드를 수행하는데 소요된 시간
		Sy : 커널 코드를 수행하는데 소요된 시간
		Id : Idle상태에서 수행하는데 소요된 시간(I/O 대기시간 포함)
		Wa : I/O 대기 소요시간
		St : 가상머신에서 뺏긴 시간
 
 - 옵션 		k : 1000단위로 출력
		K : 1024단위로 출력
		m : 1000000단위로 출력
		M : 1048576단위로 출력

■ 프로세스 관련 명령어
===프로세스===

ps -ef | grep 프로세스이름
프로세스 상태를 확인하는 명령(ps -C 프로세스이름과 동일)

pidstat -p <pid1>, <pid2>, <pid3>, ,,,
프로세스별 cpu 사용량 모니터링 

pmap <pid>
프로세스의 메모리 구성

kill -9 프로세스번호
프로세스 강제종료

===프로세스===

■ netstat 관련
netstat -a | grep ftp
netstat -a | grep sshd

netstat -lt
리스닝 상태인 프로세스
